// <auto-generated />
using System;
using CardShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CardShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardShop.Models.Domain.CardType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("CardTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Name = "Base"
                        },
                        new
                        {
                            TypeId = 2,
                            Name = "Rookie"
                        },
                        new
                        {
                            TypeId = 3,
                            Name = "Insert"
                        },
                        new
                        {
                            TypeId = 4,
                            Name = "Autographed"
                        },
                        new
                        {
                            TypeId = 5,
                            Name = "Relic"
                        },
                        new
                        {
                            TypeId = 6,
                            Name = "Parallel"
                        },
                        new
                        {
                            TypeId = 7,
                            Name = "Memorabillia"
                        },
                        new
                        {
                            TypeId = 8,
                            Name = "Promotional"
                        },
                        new
                        {
                            TypeId = 9,
                            Name = "Chase"
                        },
                        new
                        {
                            TypeId = 10,
                            Name = "Box Topper"
                        });
                });

            modelBuilder.Entity("CardShop.Models.Domain.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            ManufacturerId = 1,
                            Name = "Topps"
                        },
                        new
                        {
                            ManufacturerId = 2,
                            Name = "Panini"
                        },
                        new
                        {
                            ManufacturerId = 3,
                            Name = "Upper Deck"
                        },
                        new
                        {
                            ManufacturerId = 4,
                            Name = "Bowman"
                        },
                        new
                        {
                            ManufacturerId = 5,
                            Name = "Leaf Trading Cards"
                        },
                        new
                        {
                            ManufacturerId = 6,
                            Name = "Donruss"
                        },
                        new
                        {
                            ManufacturerId = 7,
                            Name = "Score"
                        },
                        new
                        {
                            ManufacturerId = 8,
                            Name = "Fleer"
                        },
                        new
                        {
                            ManufacturerId = 9,
                            Name = "Pro Set"
                        },
                        new
                        {
                            ManufacturerId = 10,
                            Name = "Tristar"
                        });
                });

            modelBuilder.Entity("CardShop.Models.Domain.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<DateTime>("DatePurchased")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PurchaseId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("CardShop.Models.Domain.Quality", b =>
                {
                    b.Property<int>("QualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QualityId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualityId");

                    b.ToTable("Qualities");

                    b.HasData(
                        new
                        {
                            QualityId = 1,
                            Type = "Mint"
                        },
                        new
                        {
                            QualityId = 2,
                            Type = "Near Mint"
                        },
                        new
                        {
                            QualityId = 3,
                            Type = "Excellent"
                        },
                        new
                        {
                            QualityId = 4,
                            Type = "Very Good"
                        },
                        new
                        {
                            QualityId = 5,
                            Type = "Good"
                        },
                        new
                        {
                            QualityId = 6,
                            Type = "Fair"
                        },
                        new
                        {
                            QualityId = 7,
                            Type = "Poor"
                        },
                        new
                        {
                            QualityId = 8,
                            Type = "Damaged"
                        });
                });

            modelBuilder.Entity("CardShop.Models.Domain.Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            SportId = 1,
                            Name = "Baseball"
                        },
                        new
                        {
                            SportId = 2,
                            Name = "Football"
                        },
                        new
                        {
                            SportId = 3,
                            Name = "Hockey"
                        },
                        new
                        {
                            SportId = 4,
                            Name = "Golf"
                        },
                        new
                        {
                            SportId = 5,
                            Name = "Wrestling"
                        },
                        new
                        {
                            SportId = 6,
                            Name = "Racing"
                        },
                        new
                        {
                            SportId = 7,
                            Name = "Boxing"
                        },
                        new
                        {
                            SportId = 8,
                            Name = "MMA"
                        });
                });

            modelBuilder.Entity("CardShop.Models.Domain.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 11,
                            Name = "Atlanta Braves"
                        },
                        new
                        {
                            TeamId = 12,
                            Name = "Atlanta Falcons"
                        },
                        new
                        {
                            TeamId = 13,
                            Name = "Atlanta Hawks"
                        },
                        new
                        {
                            TeamId = 14,
                            Name = "Atlanta United"
                        },
                        new
                        {
                            TeamId = 15,
                            Name = "Austin FC"
                        },
                        new
                        {
                            TeamId = 16,
                            Name = "Baltimore Orioles"
                        },
                        new
                        {
                            TeamId = 17,
                            Name = "Baltimore Ravens"
                        },
                        new
                        {
                            TeamId = 18,
                            Name = "Boston Red Sox"
                        },
                        new
                        {
                            TeamId = 19,
                            Name = "New England Patriots"
                        },
                        new
                        {
                            TeamId = 20,
                            Name = "Boston Celtics"
                        },
                        new
                        {
                            TeamId = 21,
                            Name = "Boston Bruins"
                        },
                        new
                        {
                            TeamId = 22,
                            Name = "New England Revolution"
                        },
                        new
                        {
                            TeamId = 23,
                            Name = "Buffalo Bills"
                        },
                        new
                        {
                            TeamId = 24,
                            Name = "Buffalo Sabres"
                        },
                        new
                        {
                            TeamId = 25,
                            Name = "Calgary Flames"
                        },
                        new
                        {
                            TeamId = 26,
                            Name = "Carolina Panthers"
                        },
                        new
                        {
                            TeamId = 27,
                            Name = "Charlotte Hornets"
                        },
                        new
                        {
                            TeamId = 28,
                            Name = "Charlotte FC"
                        },
                        new
                        {
                            TeamId = 29,
                            Name = "Chicago Cubs"
                        },
                        new
                        {
                            TeamId = 30,
                            Name = "Chicago White Sox"
                        },
                        new
                        {
                            TeamId = 31,
                            Name = "Chicago Bears"
                        },
                        new
                        {
                            TeamId = 32,
                            Name = "Chicago Bulls"
                        },
                        new
                        {
                            TeamId = 33,
                            Name = "Chicago Blackhawks"
                        },
                        new
                        {
                            TeamId = 34,
                            Name = "Chicago Fire"
                        },
                        new
                        {
                            TeamId = 35,
                            Name = "Cincinnati Reds"
                        },
                        new
                        {
                            TeamId = 36,
                            Name = "Cincinnati Bengals"
                        },
                        new
                        {
                            TeamId = 37,
                            Name = "FC Cincinnati"
                        },
                        new
                        {
                            TeamId = 38,
                            Name = "Cleveland Guardians"
                        },
                        new
                        {
                            TeamId = 39,
                            Name = "Cleveland Browns"
                        },
                        new
                        {
                            TeamId = 40,
                            Name = "Cleveland Cavaliers"
                        },
                        new
                        {
                            TeamId = 41,
                            Name = "Columbus Blue Jackets"
                        },
                        new
                        {
                            TeamId = 42,
                            Name = "Columbus Crew"
                        },
                        new
                        {
                            TeamId = 43,
                            Name = "Texas Rangers"
                        },
                        new
                        {
                            TeamId = 44,
                            Name = "Dallas Cowboys"
                        },
                        new
                        {
                            TeamId = 45,
                            Name = "Dallas Mavericks"
                        },
                        new
                        {
                            TeamId = 46,
                            Name = "Dallas Stars"
                        },
                        new
                        {
                            TeamId = 47,
                            Name = "FC Dallas"
                        },
                        new
                        {
                            TeamId = 48,
                            Name = "Colorado Rockies"
                        },
                        new
                        {
                            TeamId = 49,
                            Name = "Denver Broncos"
                        },
                        new
                        {
                            TeamId = 50,
                            Name = "Denver Nuggets"
                        },
                        new
                        {
                            TeamId = 51,
                            Name = "Colorado Avalanche"
                        },
                        new
                        {
                            TeamId = 52,
                            Name = "Colorado Rapids"
                        },
                        new
                        {
                            TeamId = 53,
                            Name = "Detroit Tigers"
                        },
                        new
                        {
                            TeamId = 54,
                            Name = "Detroit Lions"
                        },
                        new
                        {
                            TeamId = 55,
                            Name = "Detroit Pistons"
                        },
                        new
                        {
                            TeamId = 56,
                            Name = "Detroit Red Wings"
                        },
                        new
                        {
                            TeamId = 57,
                            Name = "Edmonton Oilers"
                        },
                        new
                        {
                            TeamId = 58,
                            Name = "Green Bay Packers"
                        },
                        new
                        {
                            TeamId = 59,
                            Name = "Houston Astros"
                        },
                        new
                        {
                            TeamId = 60,
                            Name = "Houston Texans"
                        },
                        new
                        {
                            TeamId = 61,
                            Name = "Houston Rockets"
                        },
                        new
                        {
                            TeamId = 62,
                            Name = "Houston Dynamo"
                        },
                        new
                        {
                            TeamId = 63,
                            Name = "Indianapolis Colts"
                        },
                        new
                        {
                            TeamId = 64,
                            Name = "Indiana Pacers"
                        },
                        new
                        {
                            TeamId = 65,
                            Name = "Jacksonville Jaguars"
                        },
                        new
                        {
                            TeamId = 66,
                            Name = "Kansas City Royals"
                        },
                        new
                        {
                            TeamId = 67,
                            Name = "Kansas City Chiefs"
                        },
                        new
                        {
                            TeamId = 68,
                            Name = "Sporting Kansas City"
                        },
                        new
                        {
                            TeamId = 69,
                            Name = "Las Vegas Raiders"
                        },
                        new
                        {
                            TeamId = 70,
                            Name = "Vegas Golden Knights"
                        },
                        new
                        {
                            TeamId = 71,
                            Name = "Los Angeles Dodgers"
                        },
                        new
                        {
                            TeamId = 72,
                            Name = "Los Angeles Angels"
                        },
                        new
                        {
                            TeamId = 73,
                            Name = "Los Angeles Rams"
                        },
                        new
                        {
                            TeamId = 74,
                            Name = "Los Angeles Chargers"
                        },
                        new
                        {
                            TeamId = 75,
                            Name = "Los Angeles Lakers"
                        },
                        new
                        {
                            TeamId = 76,
                            Name = "Los Angeles Clippers"
                        },
                        new
                        {
                            TeamId = 77,
                            Name = "LA Kings"
                        },
                        new
                        {
                            TeamId = 78,
                            Name = "Anaheim Ducks"
                        },
                        new
                        {
                            TeamId = 79,
                            Name = "LA Galaxy"
                        },
                        new
                        {
                            TeamId = 80,
                            Name = "LA FC"
                        },
                        new
                        {
                            TeamId = 81,
                            Name = "Memphis Grizzlies"
                        },
                        new
                        {
                            TeamId = 82,
                            Name = "Miami Marlins"
                        },
                        new
                        {
                            TeamId = 83,
                            Name = "Miami Dolphins"
                        },
                        new
                        {
                            TeamId = 84,
                            Name = "Miami Heat"
                        },
                        new
                        {
                            TeamId = 85,
                            Name = "Florida Panthers"
                        },
                        new
                        {
                            TeamId = 86,
                            Name = "Inter Miami"
                        },
                        new
                        {
                            TeamId = 87,
                            Name = "Minnesota Twins"
                        },
                        new
                        {
                            TeamId = 88,
                            Name = "Minnesota Vikings"
                        },
                        new
                        {
                            TeamId = 89,
                            Name = "Minnesota Timberwolves"
                        },
                        new
                        {
                            TeamId = 90,
                            Name = "Minnesota Wild"
                        },
                        new
                        {
                            TeamId = 91,
                            Name = "Minnesota United"
                        },
                        new
                        {
                            TeamId = 92,
                            Name = "Milwaukee Brewers"
                        },
                        new
                        {
                            TeamId = 93,
                            Name = "Milwaukee Bucks"
                        },
                        new
                        {
                            TeamId = 94,
                            Name = "Montreal Canadiens"
                        },
                        new
                        {
                            TeamId = 95,
                            Name = "Montreal Impact"
                        },
                        new
                        {
                            TeamId = 96,
                            Name = "Tennessee Titans"
                        },
                        new
                        {
                            TeamId = 97,
                            Name = "Nashville Predators"
                        },
                        new
                        {
                            TeamId = 98,
                            Name = "Nashville SC"
                        },
                        new
                        {
                            TeamId = 99,
                            Name = "New Orleans Saints"
                        },
                        new
                        {
                            TeamId = 100,
                            Name = "New Orleans Pelicans"
                        },
                        new
                        {
                            TeamId = 101,
                            Name = "New York Yankees"
                        },
                        new
                        {
                            TeamId = 102,
                            Name = "New York Mets"
                        },
                        new
                        {
                            TeamId = 103,
                            Name = "New York Giants"
                        },
                        new
                        {
                            TeamId = 104,
                            Name = "New York Jets"
                        },
                        new
                        {
                            TeamId = 105,
                            Name = "New York Knicks"
                        },
                        new
                        {
                            TeamId = 106,
                            Name = "Brooklyn Nets"
                        },
                        new
                        {
                            TeamId = 107,
                            Name = "New York Rangers"
                        },
                        new
                        {
                            TeamId = 108,
                            Name = "New York Islanders"
                        },
                        new
                        {
                            TeamId = 109,
                            Name = "New Jersey Devils"
                        },
                        new
                        {
                            TeamId = 110,
                            Name = "New York Red Bulls"
                        },
                        new
                        {
                            TeamId = 111,
                            Name = "New York City FC"
                        },
                        new
                        {
                            TeamId = 112,
                            Name = "Oakland A's"
                        },
                        new
                        {
                            TeamId = 113,
                            Name = "Oklahoma City Thunder"
                        },
                        new
                        {
                            TeamId = 114,
                            Name = "Ottawa Senators"
                        },
                        new
                        {
                            TeamId = 115,
                            Name = "Orlando Magic"
                        },
                        new
                        {
                            TeamId = 116,
                            Name = "Orlando City"
                        },
                        new
                        {
                            TeamId = 117,
                            Name = "Philadelphia Phillies"
                        },
                        new
                        {
                            TeamId = 118,
                            Name = "Philadelphia Eagles"
                        },
                        new
                        {
                            TeamId = 119,
                            Name = "Philadelphia 76ers"
                        },
                        new
                        {
                            TeamId = 120,
                            Name = "Philadelphia Flyers"
                        },
                        new
                        {
                            TeamId = 121,
                            Name = "Philadelphia Union"
                        },
                        new
                        {
                            TeamId = 122,
                            Name = "Arizona Diamondbacks"
                        },
                        new
                        {
                            TeamId = 123,
                            Name = "Arizona Cardinals"
                        },
                        new
                        {
                            TeamId = 124,
                            Name = "Phoenix Suns"
                        },
                        new
                        {
                            TeamId = 125,
                            Name = "Pittsburgh Pirates"
                        },
                        new
                        {
                            TeamId = 126,
                            Name = "Pittsburgh Steelers"
                        },
                        new
                        {
                            TeamId = 127,
                            Name = "Pittsburgh Penguins"
                        },
                        new
                        {
                            TeamId = 128,
                            Name = "Portland Trail Blazers"
                        },
                        new
                        {
                            TeamId = 129,
                            Name = "Portland Timbers"
                        },
                        new
                        {
                            TeamId = 130,
                            Name = "Carolina Hurricanes"
                        },
                        new
                        {
                            TeamId = 131,
                            Name = "Sacramento Kings"
                        },
                        new
                        {
                            TeamId = 132,
                            Name = "Utah Jazz"
                        },
                        new
                        {
                            TeamId = 133,
                            Name = "Real Salt Lake"
                        },
                        new
                        {
                            TeamId = 134,
                            Name = "San Antonio Spurs"
                        },
                        new
                        {
                            TeamId = 135,
                            Name = "San Diego Padres"
                        },
                        new
                        {
                            TeamId = 136,
                            Name = "San Francisco Giants"
                        },
                        new
                        {
                            TeamId = 137,
                            Name = "San Francisco 49ers"
                        },
                        new
                        {
                            TeamId = 138,
                            Name = "Golden State Warriors"
                        },
                        new
                        {
                            TeamId = 139,
                            Name = "San Jose Sharks"
                        },
                        new
                        {
                            TeamId = 140,
                            Name = "San Jose Earthquakes"
                        },
                        new
                        {
                            TeamId = 141,
                            Name = "St. Louis Cardinals"
                        },
                        new
                        {
                            TeamId = 142,
                            Name = "St. Louis Blues"
                        },
                        new
                        {
                            TeamId = 143,
                            Name = "St. Louis City FC"
                        },
                        new
                        {
                            TeamId = 144,
                            Name = "Seattle Mariners"
                        },
                        new
                        {
                            TeamId = 145,
                            Name = "Seattle Seahawks"
                        },
                        new
                        {
                            TeamId = 146,
                            Name = "Seattle Kraken"
                        },
                        new
                        {
                            TeamId = 147,
                            Name = "Seattle Sounders"
                        },
                        new
                        {
                            TeamId = 148,
                            Name = "Tampa Bay Rays"
                        },
                        new
                        {
                            TeamId = 149,
                            Name = "Tampa Bay Buccaneers"
                        },
                        new
                        {
                            TeamId = 150,
                            Name = "Tampa Bay Lightning"
                        },
                        new
                        {
                            TeamId = 151,
                            Name = "Toronto Blue Jays"
                        },
                        new
                        {
                            TeamId = 152,
                            Name = "Toronto Raptors"
                        },
                        new
                        {
                            TeamId = 153,
                            Name = "Toronto Maple Leafs"
                        },
                        new
                        {
                            TeamId = 154,
                            Name = "Toronto FC"
                        },
                        new
                        {
                            TeamId = 155,
                            Name = "Vancouver Canucks"
                        },
                        new
                        {
                            TeamId = 156,
                            Name = "Vancouver Whitecaps"
                        },
                        new
                        {
                            TeamId = 157,
                            Name = "Washington Nationals"
                        },
                        new
                        {
                            TeamId = 158,
                            Name = "Washington Commanders"
                        },
                        new
                        {
                            TeamId = 159,
                            Name = "Washington Wizards"
                        },
                        new
                        {
                            TeamId = 160,
                            Name = "Washington Capitals"
                        },
                        new
                        {
                            TeamId = 161,
                            Name = "DC United"
                        });
                });

            modelBuilder.Entity("CardShop.Models.Domain.TradingCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForSale")
                        .HasColumnType("bit");

                    b.Property<int?>("ManufactuererId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QualityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SportId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<short?>("Year")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ManufactuererId");

                    b.HasIndex("QualityId");

                    b.HasIndex("SportId");

                    b.HasIndex("TeamId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("CardShop.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PurchasedCards", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "PurchaseId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchasedCards");
                });

            modelBuilder.Entity("TypesOfCards", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("TypesOfCards");
                });

            modelBuilder.Entity("CardShop.Models.Domain.Purchase", b =>
                {
                    b.HasOne("CardShop.Models.Domain.User", "Buyer")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("CardShop.Models.Domain.TradingCard", b =>
                {
                    b.HasOne("CardShop.Models.Domain.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufactuererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardShop.Models.Domain.Quality", "Quality")
                        .WithMany()
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardShop.Models.Domain.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardShop.Models.Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Quality");

                    b.Navigation("Sport");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CardShop.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CardShop.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardShop.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CardShop.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PurchasedCards", b =>
                {
                    b.HasOne("CardShop.Models.Domain.TradingCard", null)
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CardShop.Models.Domain.Purchase", null)
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TypesOfCards", b =>
                {
                    b.HasOne("CardShop.Models.Domain.TradingCard", null)
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CardShop.Models.Domain.CardType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CardShop.Models.Domain.User", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
